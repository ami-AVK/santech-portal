---
import { getCollection } from 'astro:content';

import Appbar from '../components/Appbar.astro'
import Layout from '../layouts/Layout.astro';
import Markdown from '../components/Markdown.astro';


const allBlogPosts = await getCollection('articles');
  
// создаем словарь
let sortedPosts:any = Object();

// забираем все категории из коллекции статей и собираем обьект js
allBlogPosts.forEach((obj) => { 
  let cat = obj.id.substring(0, obj.id.indexOf("/"));
  if (sortedPosts[cat]) {
      sortedPosts[cat].push(obj);
  } else {
      sortedPosts[cat] = [obj];
  }
});
// Object.keys(sortedPosts).map(entry => ({
//     params: { slug: entry }, props: { "header":entry,"articles": sortedPosts},
//   }
//   ));
// при сборке принимаем заголовок и список статей этой категории
// const { header, articles } = Astro.props;

---
<Layout title="База знаний">
  <Appbar/>
  <div class="flex px-16 py-16 scroll-smooth">
    <nav class="fixed flex flex-col gap-4 w-72" transition:animate="slide">
        <a class="block pb-2 font-extrabold  text-main-900" href="../">
          Главная
        </a>
        <ul>
        {
          <li class="py-1">
            <a class="block pb-2 font-extrabold " href="">
                База знаний
            </a>
            <ul class="pl-4">
              {   
                articles[header].map( // наполняем навигацию из коллекции по текущей категории
                  (item) => (
                    <li class="py-1">
                      <a href={"#"+item.id} class="" >{item.id.substring(item.id.lastIndexOf("/")+1,item.id.lastIndexOf("."))}</a>
                    </li>
                  )
                )
              }

            </ul>
          <li/>
        }

        {
          Object.keys(articles).filter((category)=>category!=header).map( // наполняем остальные категории
            (category) => (
              <li class="py-1">
                <a class="block pb-2 font-extrabold " href={"./"+category}>
                  {category}
                </a>
              </li>
              // ниже закоментил для генерации ссылок из других категорий
              // articles[category].map(
              //  (item) => (
              //     <li>
              //       <a href={"#"+item.id} class="" >{item.id.substring(item.id.lastIndexOf("/")+1,item.id.lastIndexOf("."))}</a>
              //     </li>
              //   )
              // )
            )
          )
        }
        </ul>
    </nav>
    <main class="pl-96">
      <section>
        <h2>
          <header class="text-3xl font-black tracking-wider uppercase  text-main-900 leading-2">
            {header}
          </header>
        </h2>
        <!-- тут создаем список статей из текущей категории, рендер маркауна ассинхронный так что он происходит для каждой статьи в компоненте Markdown_layout -->
        {
          articles[header].map(
          (item) => (
            <section id={item.id} class="py-32 prose prose-lg">
              <Markdown article={item}/>
              </section>
          )
          )
        }
      </section>
    </main>
  </div>
</Layout>